import base64
import tkinter as tk
import tkinter.messagebox as messagebox
import requests
from PIL import Image, ImageTk
from io import BytesIO
from tkinter import filedialog

qr_code_with_logo = None


def generate_qr_code(event=None):
    global qr_code_with_logo
    url = entry.get()
    if url:
        qr_code = create_qr_code(url)
        qr_code_with_logo = add_logo(qr_code)
        show_qr_code(qr_code_with_logo)
        save_button.grid(row=5, pady=10)
    else:
        messagebox.showwarning("Error", "Please enter a URL.")


def save_qr_code():
    global qr_code_with_logo
    if qr_code_with_logo is not None:
        file_path = filedialog.asksaveasfilename(defaultextension=".png")
        if file_path:
            qr_code_with_logo.save(file_path)


def create_qr_code(url):
    api_url = f"https://api.qrserver.com/v1/create-qr-code/?size=300x300&ecc=H&data={url}"
    response = requests.get(api_url)
    global qr_code_with_logo
    qr_code = Image.open(BytesIO(response.content))
    return qr_code


logo_base64 = """


"""


def add_logo(qr_code):
    logo_data = base64.b64decode(logo_base64)

    logo_data = BytesIO(logo_data)

    logo = Image.open(logo_data)

    qr_size = qr_code.size[0]
    logo_size = int(qr_size / 5)
    logo_pos = int(qr_size / 2 - logo_size / 2)
    logo = logo.resize((logo_size, logo_size), Image.LANCZOS)
    qr_code.paste(logo, (logo_pos, logo_pos))

    return qr_code


def show_qr_code(qr_code):
    qr_code = qr_code.convert("RGBA")
    datas = qr_code.getdata()

    new_data = []
    for item in datas:
        if item[0] in list(range(200, 256)):
            new_data.append((255, 255, 255, 0))
        else:
            new_data.append(item)

    qr_code.putdata(new_data)
    qr_code_tk = ImageTk.PhotoImage(qr_code)
    qr_code_label.config(image=qr_code_tk)
    qr_code_label.image = qr_code_tk


def create_gradient(width, height):
    base = Image.new('RGB', (width, height), '#2C3E50')
    top = Image.new('RGB', (width, height), '#4CA1AF')
    mask = Image.new('L', (width, height))
    mask_data = []
    for y in range(height):
        mask_data.extend(list(int(255 * (x / width)) for x in range(width)))
    mask.putdata(mask_data)
    base.paste(top, (0, 0), mask)
    return base


window = tk.Tk()
window.title("QR Code Generator | Created By: Siym")
window.geometry("700x700")

gradient = create_gradient(700, 700)
background_image = ImageTk.PhotoImage(gradient)

window.background_image = background_image
background_label = tk.Label(window, image=background_image)
background_label.place(x=0, y=0, relwidth=1, relheight=1)

center_frame = tk.Frame(window, bg='#2C3E50')
center_frame.grid(row=1, column=0, pady=20)

title_label = tk.Label(center_frame, text="QR Code Generator", fg="white", bg="#2C3E50", font=("Arial", 24, "bold"))
title_label.grid(row=0, pady=10)

url_label = tk.Label(center_frame, text="Enter a URL:", fg="white", bg="#2C3E50", font=('Arial', 15))
url_label.grid(row=1, pady=10)

entry = tk.Entry(center_frame, font=('Arial', 10), width=20, bg="#e7e7e7")
entry.grid(row=2, pady=10)
entry.bind('<Return>', generate_qr_code)

generate_button = tk.Button(center_frame, text="Generate QR Code", command=generate_qr_code, fg="#4CA1AF",
                            font=('Arial', 10))
generate_button.grid(row=3, pady=10)

save_button = tk.Button(center_frame, text="Save QR Code", command=save_qr_code, fg="#4CA1AF",
                        font=('Arial', 10))
save_button.grid(row=5, pady=10)
save_button.grid_remove()

qr_code_label = tk.Label(center_frame, bg="white")
qr_code_label.grid(row=4, pady=10)

footer_frame = tk.Frame(window, bg='#2C3E50')
footer_frame.grid(row=9, column=0, sticky='s')

footer_label_font = ('Arial', 10)
footer_label = tk.Label(footer_frame, text="© Khandakar Sayeem. All Rights Reserved. 2023", font=footer_label_font,
                        bg='#2C3E50', fg="white")
footer_label.grid(row=9, column=0, columnspan=3, pady=10, sticky="s")

window.grid_columnconfigure(0, weight=1)
window.mainloop()
